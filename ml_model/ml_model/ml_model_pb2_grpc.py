# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ml_model import ml_model_pb2 as ml__model_dot_ml__model__pb2


class Ml_ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MakePredict = channel.unary_unary(
                '/ml_model.Ml_Service/MakePredict',
                request_serializer=ml__model_dot_ml__model__pb2.MakePredictRequest.SerializeToString,
                response_deserializer=ml__model_dot_ml__model__pb2.MakePredictResponse.FromString,
                )
        self.MakeResponse = channel.unary_unary(
                '/ml_model.Ml_Service/MakeResponse',
                request_serializer=ml__model_dot_ml__model__pb2.MakeChatRequest.SerializeToString,
                response_deserializer=ml__model_dot_ml__model__pb2.MakeChatResponse.FromString,
                )


class Ml_ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MakePredict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Ml_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MakePredict': grpc.unary_unary_rpc_method_handler(
                    servicer.MakePredict,
                    request_deserializer=ml__model_dot_ml__model__pb2.MakePredictRequest.FromString,
                    response_serializer=ml__model_dot_ml__model__pb2.MakePredictResponse.SerializeToString,
            ),
            'MakeResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeResponse,
                    request_deserializer=ml__model_dot_ml__model__pb2.MakeChatRequest.FromString,
                    response_serializer=ml__model_dot_ml__model__pb2.MakeChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ml_model.Ml_Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Ml_Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MakePredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_model.Ml_Service/MakePredict',
            ml__model_dot_ml__model__pb2.MakePredictRequest.SerializeToString,
            ml__model_dot_ml__model__pb2.MakePredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_model.Ml_Service/MakeResponse',
            ml__model_dot_ml__model__pb2.MakeChatRequest.SerializeToString,
            ml__model_dot_ml__model__pb2.MakeChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
